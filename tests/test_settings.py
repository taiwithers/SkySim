"""
Tests for SkySim Settings objects.
"""

from pathlib import Path
from typing import Any
from zoneinfo import ZoneInfo

import matplotlib.colors as mpl_colors
import pytest
from astropy import units as u

from skysim.settings import (
    ImageSettings,
    PlotSettings,
    Settings,
    load_from_toml,
    toml_to_dicts,
)

# from ipdb import set_trace as breakpoint  # overriding builtin breakpoint()

TEST_ROOT_PATH = Path(__file__).resolve().parent
"""Path to root test suite directory.
"""


ROOT_PATH = TEST_ROOT_PATH.parent
"""Path to root directory containing repository.
"""


@pytest.fixture(scope="session", params=["minimal", "minimal_multiframe"])
def config_path(request: pytest.FixtureRequest) -> Path:
    # pylint: disable=missing-function-docstring
    return Path(f"{TEST_ROOT_PATH}/{request.param}.toml")


@pytest.fixture(scope="session")
def settings(config_path: str) -> Settings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path, return_settings=True)


@pytest.fixture(scope="session")
def image_settings(config_path: str) -> ImageSettings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path)[0]


@pytest.fixture(scope="session")
def plot_settings(config_path: str) -> PlotSettings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path)[1]


def _test_any_settings(settings: Settings) -> None:
    """
    Generic tests that can apply to any `Settings` object initialized from the
    `settings()` fixture.

    Parameters
    ----------
    settings : Settings
        `Settings` object initialized from the settings() fixture.
    """
    assert len(settings.observation_times) == settings.frames
    assert settings.degrees_per_pixel == 0.06 * u.deg
    assert settings.timezone == ZoneInfo("America/Toronto")


def test_settings(settings: Settings) -> None:
    """
    Runs `_test_any_settings`.

    Parameters
    ----------
    settings : Settings
        Generated by the `settings()` fixture.
    """
    _test_any_settings(settings)


def test_image_settings(image_settings: ImageSettings) -> None:
    """
    Tests for specifically `ImageSettings` objects.

    Parameters
    ----------
    image_settings : ImageSettings
        Generated by the `image_settings()` fixture.
    """
    _test_any_settings(image_settings)
    assert mpl_colors.same_color(image_settings.colour_mapping(0), "black")


def test_plot_settings(plot_settings: PlotSettings) -> None:
    """
    Tests for specifically `PlotSettings` objects.

    Parameters
    ----------
    plot_settings : PlotSettings
        Generated by the `plot_settings()` fixture.
    """
    _test_any_settings(plot_settings)

    assert isinstance(plot_settings.observation_info, str)


@pytest.mark.parametrize(
    "input_location",
    [
        pytest.param(
            [43.6534817, 43.6534817]
        ),  # input as lat/long (toml array -> python list)
        pytest.param("43.6534817", marks=pytest.mark.xfail),
        pytest.param(" ", marks=pytest.mark.xfail),
    ],
)
def test_earth_location(config_path: Path, input_location: str) -> None:
    """Confirm that a failed earthlocation search reports an error.

    Parameters
    ----------
    config_path : Path
        Path to config file for non-`input_location` elements.
    input_location : str
        A failing input location.
    """

    _test_settings_attribute(
        config_path,
        Settings,
        attribute="earth_location",
        key="input_location",
        value=input_location,
    )


def _test_settings_attribute(
    config_path: Path,
    settings_type: type[Settings | ImageSettings | PlotSettings],
    attribute: str,
    key: str,
    value: Any,
) -> Any:
    """Create a settings object with a custom attribute (overriding the TOML).
    Then access that attribute.

    Parameters
    ----------
    config_path : Path
        Path to the config file to use.
    settings_type : type[Settings  |  ImageSettings  |  PlotSettings]
        Which type of settings object to create.
    attribute : str
        Which attribute to override.
    key : str
        The `toml_to_dicts` key to override.
    value : Any
        The value to assign to that key.

    Returns
    -------
    Any
        Value of `attribute`.
    """
    settings_config, image_config, plot_config = toml_to_dicts(config_path)

    if (
        type(settings_type)  # pylint: disable=unidiomatic-typecheck
        == type[ImageSettings]
    ):
        settings = Settings(**settings_config)
        image_config[key] = value
        settings_to_test = settings.get_image_settings(**image_config)

    elif (
        type(settings_type)  # pylint: disable=unidiomatic-typecheck
        == type[PlotSettings]
    ):
        settings = Settings(**settings_config)
        plot_config[key] = value
        settings_to_test = settings.get_plot_settings(**plot_config)

    else:
        settings_config[key] = value
        settings_to_test = Settings(**settings_config)

    return getattr(settings_to_test, attribute)
