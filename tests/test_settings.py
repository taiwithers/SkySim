"""
Tests for SkySim Settings objects.
"""

from datetime import date, time, timedelta
from pathlib import Path
from zoneinfo import ZoneInfo

import matplotlib.colors as mpl_colors
import pytest
from astropy import units as u

from skysim.settings import (
    ImageSettings,
    PlotSettings,
    Settings,
    SettingsPair,
    load_from_toml,
)

# from ipdb import set_trace as breakpoint  # overriding builtin breakpoint()

TEST_ROOT_PATH = Path(__file__).resolve().parent
"""Path to root test suite directory.
"""


ROOT_PATH = TEST_ROOT_PATH.parent
"""Path to root directory containing repository.
"""


# TODO: use parameterization to run tests of manual/loaded[minimal, maximal] & still/gif ?
# https://docs.pytest.org/en/stable/how-to/fixtures.html#parametrizing-fixtures
@pytest.fixture()
def manual_settings() -> Settings:
    # pylint: disable=missing-function-docstring
    input_location = "Toronto"
    field_of_view = 10 * u.deg
    altitude_angle = 40 * u.deg
    azimuth_angle = 140 * u.arcsecond + 145 * u.deg
    image_pixels = 250

    start_date = date(year=2025, month=2, day=25)
    start_time = time(hour=20, minute=30)
    snapshot_frequency = timedelta(minutes=0)
    duration = timedelta(minutes=0)

    return Settings(
        input_location=input_location,
        field_of_view=field_of_view,
        altitude_angle=altitude_angle,
        azimuth_angle=azimuth_angle,
        image_pixels=image_pixels,
        duration=duration,
        snapshot_frequency=snapshot_frequency,
        start_date=start_date,
        start_time=start_time,
    )


@pytest.fixture()
def manual_image_settings(manual_settings: Settings) -> ImageSettings:
    # pylint: disable=missing-function-docstring
    object_colours = {
        "fallback": "w",
        "O": "lightskyblue",
        "B": "lightcyan",
        "A": "white",
        "F": "lemonchiffon",
        "G": "yellow",
        "K": "orange",
        "M": "lightpink",  # "#f9706b",
        "mercury": "white",
        "venus": "lemonchiffon",
        "mars": "orange",
        "jupiter": "white",
        "saturn": "white",
        "uranus": "white",
        "neptune": "white",
    }
    colour_values = ["#000", "#171726", "dodgerblue", "#00BFFF", "lightskyblue"]
    magnitude_values = [6, 4, 2, 0, -1.5]

    colour_time_indices = {0: 0, 3: 1, 5: 2, 7: 3, 12: 4, 15: 3, 18: 2, 21: 1, 24: 0}
    magnitude_time_indices = colour_time_indices.copy()

    return manual_settings.get_image_settings(
        object_colours=object_colours,
        colour_values=colour_values,
        colour_time_indices=colour_time_indices,
        magnitude_values=magnitude_values,
        magnitude_time_indices=magnitude_time_indices,
    )


@pytest.fixture()
def manual_plot_settings(manual_settings: Settings) -> PlotSettings:
    # pylint: disable=missing-function-docstring
    fps = 2.5
    filename = "SkySim.png"
    figure_size = (4, 4.5)
    dpi = 200
    return manual_settings.get_plot_settings(
        fps=fps, filename=filename, figure_size=figure_size, dpi=dpi
    )


def _test_any_settings(settings: Settings) -> None:
    """
    Generic tests that can apply to any `Settings` object initialized from the
    `settings()` fixture.

    Parameters
    ----------
    settings : Settings
        `Settings` object initialized from the settings() fixture.
    """
    assert settings.frames == 1
    assert settings.degrees_per_pixel == 0.04 * u.deg
    assert settings.timezone == ZoneInfo("America/Toronto")


def test_settings(manual_settings: Settings) -> None:
    """
    Runs `_test_any_settings`.

    Parameters
    ----------
    manual_settings : Settings
        Generated by the `settings()` fixture.
    """
    _test_any_settings(manual_settings)


def test_image_settings(manual_image_settings: ImageSettings) -> None:
    """
    Tests for specifically `ImageSettings` objects.

    Parameters
    ----------
    manual_image_settings : ImageSettings
        Generated by the `image_settings()` fixture.
    """
    _test_any_settings(manual_image_settings)
    assert mpl_colors.same_color(manual_image_settings.colour_mapping(0), "black")


def test_plot_settings(manual_plot_settings: PlotSettings) -> None:
    """
    Tests for specifically `PlotSettings` objects.

    Parameters
    ----------
    manual_plot_settings : PlotSettings
        Generated by the `plot_settings()` fixture.
    """
    _test_any_settings(manual_plot_settings)

    assert isinstance(manual_plot_settings.observation_info, str)


@pytest.fixture()
def minimal_config_path() -> str:
    # pylint: disable=missing-function-docstring
    return f"{TEST_ROOT_PATH}/minimal.toml"


@pytest.fixture()
def minimal_settings(minimal_config_path: str) -> SettingsPair:
    # pylint: disable=missing-function-docstring
    return load_from_toml(minimal_config_path)


def test_load_from_toml(
    minimal_settings: SettingsPair,
    manual_image_settings: ImageSettings,
    manual_plot_settings: PlotSettings,
) -> None:
    """
    Compare settings from TOML vs manual initialization.

    Parameters
    ----------
    minimal_settings : SettingsPair
        `ImageSettings` and `PlotSettings` as loaded from TOML.
    manual_image_settings : ImageSettings
        Manually created ImageSettings.
    manual_plot_settings : PlotSettings
        Manually created PlotSettings.
    """

    i_s, p_s = minimal_settings
    assert isinstance(i_s, ImageSettings)
    assert isinstance(p_s, PlotSettings)

    assert i_s == manual_image_settings
    assert p_s == manual_plot_settings


# TODO: add tests for location and timezone validation
