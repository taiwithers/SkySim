"""
Tests for SkySim Settings objects.
"""

from pathlib import Path
from zoneinfo import ZoneInfo

import matplotlib.colors as mpl_colors
import pytest
from astropy import units as u

from skysim.settings import (
    ImageSettings,
    PlotSettings,
    Settings,
    load_from_toml,
)

# from ipdb import set_trace as breakpoint  # overriding builtin breakpoint()

TEST_ROOT_PATH = Path(__file__).resolve().parent
"""Path to root test suite directory.
"""


ROOT_PATH = TEST_ROOT_PATH.parent
"""Path to root directory containing repository.
"""


# TODO: use parameterization to run tests of loaded[minimal, maximal] & still/gif ?
# https://docs.pytest.org/en/stable/how-to/fixtures.html#parametrizing-fixtures


@pytest.fixture(params=["minimal", "minimal_multiframe"])
def config_path(request: pytest.FixtureRequest) -> Path:
    # pylint: disable=missing-function-docstring
    return Path(f"{TEST_ROOT_PATH}/{request.param}.toml")


@pytest.fixture()
def settings(config_path: str) -> Settings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path, return_settings=True)


@pytest.fixture()
def image_settings(config_path: str) -> ImageSettings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path)[0]


@pytest.fixture()
def plot_settings(config_path: str) -> PlotSettings:
    # pylint: disable=missing-function-docstring
    return load_from_toml(config_path)[1]


def _test_any_settings(settings: Settings) -> None:
    """
    Generic tests that can apply to any `Settings` object initialized from the
    `settings()` fixture.

    Parameters
    ----------
    settings : Settings
        `Settings` object initialized from the settings() fixture.
    """
    assert len(settings.observation_times) == settings.frames
    assert settings.degrees_per_pixel == 0.06 * u.deg
    assert settings.timezone == ZoneInfo("America/Toronto")


def test_settings(settings: Settings) -> None:
    """
    Runs `_test_any_settings`.

    Parameters
    ----------
    settings : Settings
        Generated by the `settings()` fixture.
    """
    _test_any_settings(settings)


def test_image_settings(image_settings: ImageSettings) -> None:
    """
    Tests for specifically `ImageSettings` objects.

    Parameters
    ----------
    image_settings : ImageSettings
        Generated by the `image_settings()` fixture.
    """
    _test_any_settings(image_settings)
    assert mpl_colors.same_color(image_settings.colour_mapping(0), "black")


def test_plot_settings(plot_settings: PlotSettings) -> None:
    """
    Tests for specifically `PlotSettings` objects.

    Parameters
    ----------
    plot_settings : PlotSettings
        Generated by the `plot_settings()` fixture.
    """
    _test_any_settings(plot_settings)

    assert isinstance(plot_settings.observation_info, str)


# TODO: add tests for location and timezone validation
