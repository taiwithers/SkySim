"""
Tests for SkySim Settings objects.
"""

from pathlib import Path
from typing import Any

import matplotlib.colors as mpl_colors
import pytest

from skysim.settings import (
    ImageSettings,
    PlotSettings,
    Settings,
)

from .utils import modified_settings_object


def _test_any_settings(settings: Settings) -> None:
    """
    Generic tests that can apply to any `Settings` object initialized from the
    `settings()` fixture.

    Parameters
    ----------
    settings : Settings
        `Settings` object initialized from the settings() fixture.
    """
    assert len(settings.observation_times) == settings.frames


def _test_settings_attribute(
    config_path: Path,
    settings_type: type[Settings | ImageSettings | PlotSettings],
    attribute: str,
    key: str,
    value: Any,
) -> Any:
    """Create a settings object with a custom attribute (overriding the TOML).
    Then access that attribute.

    Parameters
    ----------
    config_path : Path
        Path to the config file to use.
    settings_type : type[Settings  |  ImageSettings  |  PlotSettings]
        Which type of settings object to create.
    attribute : str
        Which attribute to override.
    key : str
        The `toml_to_dicts` key to override.
    value : Any
        The value to assign to that key.

    Returns
    -------
    Any
        Value of `attribute`.
    """

    settings_to_test = modified_settings_object(config_path, settings_type, key, value)

    return getattr(settings_to_test, attribute)


def test_settings(settings: Settings) -> None:
    """
    Runs `_test_any_settings`.

    Parameters
    ----------
    settings : Settings
        Generated by the `settings()` fixture.
    """
    _test_any_settings(settings)


@pytest.mark.flaky(only_rerun="ConnectionError")
def test_image_settings(image_settings: ImageSettings) -> None:
    """
    Tests for specifically `ImageSettings` objects.

    Parameters
    ----------
    image_settings : ImageSettings
        Generated by the `image_settings()` fixture.
    """
    _test_any_settings(image_settings)
    assert mpl_colors.same_color(image_settings.colour_mapping(0), "black")


def test_plot_settings(plot_settings: PlotSettings) -> None:
    """
    Tests for specifically `PlotSettings` objects.

    Parameters
    ----------
    plot_settings : PlotSettings
        Generated by the `plot_settings()` fixture.
    """
    _test_any_settings(plot_settings)

    assert isinstance(plot_settings.observation_info, str)


@pytest.mark.parametrize(
    "input_location",
    [
        pytest.param(
            [43.6534817, 43.6534817]
        ),  # input as lat/long (toml array -> python list)
        pytest.param("43.6534817", marks=pytest.mark.xfail),
        pytest.param(" ", marks=pytest.mark.xfail),
    ],
)
def test_earth_location(config_path: Path, input_location: str) -> None:
    """Confirm that a failed earthlocation search reports an error.

    Parameters
    ----------
    config_path : Path
        Path to config file for non-`input_location` elements.
    input_location : str
        A failing input location.
    """

    _test_settings_attribute(
        config_path,
        Settings,
        attribute="earth_location",
        key="input_location",
        value=input_location,
    )
